name: Build, Push, and Deploy Docker Images (QA)

on:
  push:
    branches: [ "QA" ]
    paths:
      - "BACKEND/Calculadora/**"
      - "BACKEND/exam-reminder-service/**"
      - "BACKEND/file-management/delete-service/**"
      - "BACKEND/file-management/frontend/**"
      - "BACKEND/file-management/search-service/**"
      - "BACKEND/file-management/upload-service/**"
      - "BACKEND/link-management/delete-link-service/**"
      - "BACKEND/link-management/frontend/**"
      - "BACKEND/link-management/save-link-service/**"
      - "BACKEND/maestro-service/**"
      - "BACKEND/tareas-service/**"     
      - "BACKEND/weekly-planner/services/create_service/**"  
      - "BACKEND/weekly-planner/services/delete_services/**"   
      - "BACKEND/weekly-planner/services/read_services/**"   
      - "BACKEND/weekly-planner/services/update_services/**"   
      - "BACKEND/weekly-planner/webhooks/**"   
      - "BACKEND/user-auth-microservices/**"  
      - "frontend/**"   

jobs:
  check-paths:
    runs-on: ubuntu-latest
    outputs:
      calculadora: ${{ steps.filter.outputs.calculadora }}
      wp_create: ${{ steps.filter.outputs.wp_create }}
      wp_delete: ${{ steps.filter.outputs.wp_delete }}
      wp_read: ${{ steps.filter.outputs.wp_read }}
      wp_update: ${{ steps.filter.outputs.wp_update }}
      wp_webhook: ${{ steps.filter.outputs.wp_webhook }}
      exam_reminder: ${{ steps.filter.outputs.exam_reminder }}
      fm_delete: ${{ steps.filter.outputs.fm_delete }}
      fm_frontend: ${{ steps.filter.outputs.fm_frontend }}
      fm_search: ${{ steps.filter.outputs.fm_search }}
      fm_upload: ${{ steps.filter.outputs.fm_upload }}
      lm_delete: ${{ steps.filter.outputs.lm_delete }}
      lm_frontend: ${{ steps.filter.outputs.lm_frontend }}
      lm_save: ${{ steps.filter.outputs.lm_save }}
      maestro: ${{ steps.filter.outputs.maestro }}
      student: ${{ steps.filter.outputs.student }}
      tareas: ${{ steps.filter.outputs.tareas }}
      auth: ${{ steps.filter.outputs.auth }}
      frontend: ${{ steps.filter.outputs.frontend }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            calculadora:
              - "BACKEND/Calculadora/**"
            wp_create:
              - "BACKEND/weekly-planner/services/create_service/**"
            wp_delete:
              - "BACKEND/weekly-planner/services/delete_services/**"
            wp_read:
              - "BACKEND/weekly-planner/services/read_services/**"
            wp_update:
              - "BACKEND/weekly-planner/services/update_services/**"
            wp_webhook:
              - "BACKEND/weekly-planner/webhooks/**"
            exam_reminder:
              - "BACKEND/exam-reminder-service/**"
            fm_delete:
              - "BACKEND/file-management/delete-service/**"
            fm_frontend:
              - "BACKEND/file-management/frontend/**"
            fm_search:
              - "BACKEND/file-management/search-service/**"
            fm_upload:
              - "BACKEND/file-management/upload-service/**"
            lm_delete:
              - "BACKEND/link-management/delete-link-service/**"
            lm_frontend:
              - "BACKEND/link-management/frontend/**"
            lm_save:
              - "BACKEND/link-management/save-link-service/**"
            maestro:
              - "BACKEND/maestro-service/**"
            tareas:
              - "BACKEND/tareas-service/**"
            auth:
              - "BACKEND/user-auth-microservices/**"
            frontend:
              - "frontend/**"

# -------------------------------------CALCULADORA--------------------------------------------#
# -------------------------------------CALCULADORA--------------------------------------------#
  build-and-push-Calculadora:
    needs: check-paths
    if: needs.check-paths.outputs.calculadora == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAMEJ }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORDJ }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAMEJ }}
          password: ${{ secrets.DOCKER_PASSWORDJ }}

      - name: Build Docker image
        run: |
          cd BACKEND/Calculadora
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAMEJ }}/calculator-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAMEJ }}/calculator-microservices:latest

  deploy-Calculadora:
    needs: build-and-push-Calculadora
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.calculadora == 'true'
    steps:
      - name: Install Plink (PuTTY SSH Client)
        run: |
          sudo apt update
          sudo apt install -y putty-tools

      - name: Set up Plink Private Key
        run: |
          echo "${{ secrets.AWS_EC2_KEY_M1J }}" > key.ppk
          chmod 600 key.ppk

      - name: Deploy Docker Container on Windows Server
        run: |
          plink -ssh -i key.ppk ec2-user@${{ secrets.AWS_EC2_HOST_M1J }} powershell -Command "& {
            Write-Output 'Iniciando Despliegue en Windows...'
          
            # Verificar si Docker está instalado
            if (-Not (Get-Command docker -ErrorAction SilentlyContinue)) {
              Write-Output 'Docker no está instalado. Instalando...'
              Invoke-WebRequest -Uri https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe -OutFile DockerInstaller.exe
              Start-Process -FilePath DockerInstaller.exe -ArgumentList '/quiet' -Wait
            }
          
            # Iniciar Docker
            Start-Service Docker
            Write-Output 'Docker Iniciado.'

            # Descargar la nueva imagen
            Write-Output 'Descargando imagen Docker...'
            docker pull ${{ secrets.DOCKER_USERNAMEJ }}/calculator-microservices:latest

            # Detener y eliminar contenedor anterior si existe
            Write-Output 'Eliminando contenedor antiguo si existe...'
            docker stop calculator-microservices -ErrorAction SilentlyContinue
            docker rm calculator-microservices -ErrorAction SilentlyContinue

            # Ejecutar el nuevo contenedor
            Write-Output 'Ejecutando nuevo contenedor...'
            docker run -d -p 3010:3010 --name calculator-microservices ${{ secrets.DOCKER_USERNAMEJ }}/calculator-microservices:latest

            # Verificar el estado del contenedor
            Write-Output 'Estado de contenedores:'
            docker ps -a
          }"
