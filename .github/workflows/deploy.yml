name: Build, Push, and Deploy Docker Images (QA)

on:
  push:
    branches: [ "QA" ]
    paths:
      - "BACKEND/Calculadora/**"
      - "BACKEND/exam-reminder-service/**"
      - "BACKEND/file-management/delete-service/**"
      - "BACKEND/file-management/frontend**"
      - "BACKEND/file-management/search-service**"
      - "BACKEND/file-management/upload-service/**"
      - "BACKEND/link-management/delete-link-service/**"
      - "BACKEND/link-management/frontend**"
      - "BACKEND//link-management/save-link-service/**"
      - "BACKEND/maestro-service**"
      - "BACKEND/tareas-service/**"     
      - "BACKEND/weekly-planner/services/create_service/**"  
      - "BACKEND/weekly-planner/services/delete_services/**"   
      - "BACKEND/weekly-planner/services/read_services/**"   
      - "BACKEND/weekly-planner/services/update_services/**"   
      - "BACKEND/weekly-planner/webhooks/**"   
      - "BACKEND/user-auth-microservices**"  
      - "frontend/**"   

jobs:
  check-paths:
    runs-on: ubuntu-latest
    outputs:
      calculadora: ${{ steps.filter.outputs.calculadora }}
      wp_create: ${{ steps.filter.outputs.wp_create }}
      wp_delete: ${{ steps.filter.outputs.wp_delete }}
      wp_read: ${{ steps.filter.outputs.wp_read }}
      wp_update: ${{ steps.filter.outputs.wp_update }}
      wp-webhook: ${{ steps.filter.outputs.wpwebhook }}
      exam-reminder: ${{ steps.filter.outputs.exam-reminder}}
      fm-delete: ${{ steps.filter.outputs.fm-delete }}
      fm-frontend: ${{ steps.filter.outputs.fm-frontend }}
      fm-search: ${{ steps.filter.outputs.fm-search }}
      fm-upload: ${{ steps.filter.outputs.fm-upload }}
      lm-delete: ${{ steps.filter.outputs.lm-delete }}
      lm-frontend: ${{ steps.filter.outputs.lm-frontend }}
      lm-save: ${{ steps.filter.outputs.lm-save }}
      maestro: ${{ steps.filter.outputs.maestro }}
      student: ${{ steps.filter.outputs.student }}
      tareas: ${{ steps.filter.outputs.tareas }}
      auth: ${{ steps.filter.outputs.auth }}
      frontend: ${{ steps.filter.outputs.frontend }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            calculadora:
              - "BACKEND/Calculadora/**"
            wp_create:
              - "BACKEND/weekly-planner/services/create_service/**"
            wp_delete:
              - "BACKEND/weekly-planner/services/delete_services/**"
            wp_read:
              - "BACKEND/weekly-planner/services/read_services/**"
            wp_update:
              - "BACKEND/weekly-planner/services/update_services/**"
            wp-webhook:
              - "BACKEND/weekly-planner/webhooks/**"
            exam-reminder:
              - "BACKEND/exam-reminder-service/**"
            fm-delete:
              - "BACKEND/file-management/delete-service/**"
            fm-frontend:
              - "BACKEND/file-management/frontend/**"
            fm-search:
              - "BACKEND/file-management/search-service/**"
            fm-upload:
              - "BACKEND/file-management/upload-service/**"
            lm-delete:
              - "BACKEND/link-management/delete-link-service/**"
            lm-frontend:
              - "BACKEND/link-management/frontend/**"
            lm-save:
              - "BACKEND/link-management/save-link-service/**"
            maestro:
              - "BACKEND/maestro-service/**"
            tareas:
              - "BACKEND/tareas-service/**"
            auth:
              - "BACKEND/user-auth-microservices/**"
            frontend:
              - "frontend/**"

# -------------------------------------CALCULADORA--------------------------------------------#
  build-and-push-Calculadora:
    needs: check-paths
    if: needs.check-paths.outputs.calculadora == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/Calculadora
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/calculator-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/calculator-microservices:latest

  deploy-Calculadora:
    needs: build-and-push-Calculadora
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.calculadora == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY_M1 }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M1 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker
          
          sudo docker stop calculator-microservices || true
          sudo docker rm calculator-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/calculator-microservices:latest
          sudo docker run -d -p 3010:3010 --name calculator-microservices ${{ secrets.DOCKER_USERNAME }}/calculator-microservices:latest
          
          sudo docker ps -a
          EOF
# -------------------------------------wekkly-planner--------------------------------------------#
# -------------------------------------create--------------------------------------------#
  build-and-push-WP-create:
    needs: check-paths
    if: needs.check-paths.outputs.wp_create == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/weekly-planner/services/create_service/app 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/wpcreate-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/wpcreate-microservices:latest

  deploy-WP-create:
    needs: build-and-push-WP-create
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.wp_create == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M2 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker
          
          sudo docker stop wpcreate-microservices || true
          sudo docker rm wpcreate-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/wpcreate-microservices:latest
          sudo docker run -d -p 3020:3020 \
            --name wpcreate-microservices \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} \
            ${{ secrets.DOCKER_USERNAME }}/wpcreate-microservices:latest 
            
          sudo docker ps -a
          EOF
# -------------------------------------DELETE--------------------------------------------#
  build-and-push-WP-delete:
    needs: check-paths
    if: needs.check-paths.outputs.wp_delete == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/weekly-planner/services/delete_services/app
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/wpdelete-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/wpdelete-microservices:latest

  deploy-WP-delete:
    needs: build-and-push-WP-delete
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.wp_delete == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M3 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker
          
          sudo docker stop wpdelete-microservices || true
          sudo docker rm wpdelete-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/wpdelete-microservices:latest
          
          sudo docker run -d -p 3021:3021 \
            --name wpdelete-microservices \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} \
            ${{ secrets.DOCKER_USERNAME }}/wpdelete-microservices:latest
          
          sudo docker ps -a
          EOF
# -------------------------------------READ--------------------------------------------#
  build-and-push-WP-read:
      needs: check-paths
      if: needs.check-paths.outputs.wp_read == 'true'
      runs-on: ubuntu-latest
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
  
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
  
        - name: Build Docker image
          run: |
            cd weekly-planner/services/read_services/app 
            docker build \
              --label "commit_sha=${{ github.sha }}" \
              -t ${{ secrets.DOCKER_USERNAME }}/wpread-microservices:latest .
  
        - name: Push Docker image to Docker Hub
          run: |
            docker push ${{ secrets.DOCKER_USERNAME }}/wpread-microservices:latest
  
  deploy-WP-read:
      needs: build-and-push-WP-read
      runs-on: ubuntu-latest
      if: needs.check-paths.outputs.wp_read == 'true'
      steps:
        - name: Set permissions for private key
          run: |
            echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
            chmod 600 key.pem
  
        - name: Deploy Docker Container on AWS
          run: |
            ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M4 }} << "EOF"
            sudo yum update -y
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
            fi
            sudo systemctl start docker
            sudo systemctl enable docker
            
            sudo docker stop wpread-microservices || true
            sudo docker rm wpread-microservices || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/wpread-microservices:latest
            sudo docker run -d -p 3022:3022 \
            --name wpread-microservices\
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} \ 
            ${{ secrets.DOCKER_USERNAME }}/wpread-microservices:latest
            
            sudo docker ps -a
            EOF
# -------------------------------------UPDATE--------------------------------------------#
  build-and-push-WP-update:
      needs: check-paths
      if: needs.check-paths.outputs.wp_update == 'true'
      runs-on: ubuntu-latest
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
  
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
  
        - name: Build Docker image
          run: |
            cd BACKEND/weekly-planner/services/update_services/app 
            docker build \
              --label "commit_sha=${{ github.sha }}" \
              -t ${{ secrets.DOCKER_USERNAME }}/wpupdate-microservices:latest .
  
        - name: Push Docker image to Docker Hub
          run: |
            docker push ${{ secrets.DOCKER_USERNAME }}/wpupdate-microservices:latest
  
  deploy-WP-update:
      needs: build-and-push-WP-update
      runs-on: ubuntu-latest
      if: needs.check-paths.outputs.wp_update == 'true'
      steps:
        - name: Set permissions for private key
          run: |
            echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
            chmod 600 key.pem
  
        - name: Deploy Docker Container on AWS
          run: |
            ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M5 }} << "EOF"
            sudo yum update -y
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
            fi
            sudo systemctl start docker
            sudo systemctl enable docker
            
            sudo docker stop wpupdate-microservices || true
            sudo docker rm wpupdate-microservices || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/wpupdate-microservices:latest
            sudo docker run -d -p 3024:3024 \
             --name wpupdate-microservices \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} \
            ${{ secrets.DOCKER_USERNAME }}/wpupdate-microservices:latest
            
            sudo docker ps -a
            EOF
# -------------------------------------WEBHOOK--------------------------------------------#
  build-and-push-WP-webhook:
      needs: check-paths
      if: needs.check-paths.outputs.wp_webhook == 'true'
      runs-on: ubuntu-latest
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
  
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
  
        - name: Build Docker image
          run: |
            cd BACKEND/weekly-planner/webhooks
            docker build \
              --label "commit_sha=${{ github.sha }}" \
              -t ${{ secrets.DOCKER_USERNAME }}/wpwebhook-microservices:latest .
  
        - name: Push Docker image to Docker Hub
          run: |
            docker push ${{ secrets.DOCKER_USERNAME }}/wpwebhook-microservices:latest
  
  deploy-WP-webhook:
      needs: build-and-push-WP-webhook
      runs-on: ubuntu-latest
      if: needs.check-paths.outputs.wp_webhook == 'true'
      steps:
        - name: Set permissions for private key
          run: |
            echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
            chmod 600 key.pem
  
        - name: Deploy Docker Container on AWS
          run: |
            ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M6 }} << "EOF"
            sudo yum update -y
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
            fi
            sudo systemctl start docker
            sudo systemctl enable docker
            
            sudo docker stop wpwebhook-microservices || true
            sudo docker rm wpwebhook-microservices || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/wpwebhook-microservices:latest
            sudo docker run -d -p 3030:3030 \
            --name wpwebhook-microservices \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} \
            ${{ secrets.DOCKER_USERNAME }}/wpwebhook-microservices:latest
            
            sudo docker ps -a
            EOF
# -------------------------------------EXAMENES--------------------------------------------#
  build-and-push-exam-reminder:
    needs: check-paths
    if: needs.check-paths.outputs.exam-reminder == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/exam-reminder-service 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/exam-reminder-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/exam-reminder-microservices:latest

  deploy-exam-reminder:
    needs: build-and-push-exam-reminder
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.exam-reminder == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M7 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop exam-reminder-microservices || true
          sudo docker rm exam-reminder-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/exam-reminder-microservices:latest
          sudo docker run -d -p 8081:8081 --name exam-reminder-microservices -e DB_HOST=${{ secrets.DB_HOST }} -e DB_USER=${{ secrets.DB_USER }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_NAME=${{ secrets.DB_NAME1 }} ${{ secrets.DOCKER_USERNAME }}/exam-reminder-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------FILE-MANAGEMENT--------------------------------------------#
# -------------------------------------DELETE--------------------------------------------#
  build-and-push-fm-delete:
    needs: check-paths
    if: needs.check-paths.outputs.fm-delete == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/delete-service
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/fm-delete-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fm-delete-microservices:latest

  deploy-fm-delete:
    needs: build-and-push-fm-delete
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.fm-delete == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M8 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop fm-delete-microservices || true
          sudo docker rm fm-delete-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fm-delete-microservices:latest
          sudo docker run -d -p 8089:8089 --name fm-delete-microservices ${{ secrets.DOCKER_USERNAME }}/fm-delete-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------FRONT--------------------------------------------#
  build-and-push-fm-frontend:
    needs: check-paths
    if: needs.check-paths.outputs.fm-frontend == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/frontend
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/fm-frontend-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fm-frontend-microservices:latest

  deploy-fm-frontend:
    needs: build-and-push-fm-frontend
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.fm-frontend == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M9 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop fm-frontend-microservices || true
          sudo docker rm fm-frontend-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fm-frontend-microservices:latest
          sudo docker run -d -p 8091:8091 --name fm-frontend-microservices ${{ secrets.DOCKER_USERNAME }}/fm-frontend-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------search--------------------------------------------#
  build-and-push-fm-search:
    needs: check-paths
    if: needs.check-paths.outputs.fm-search == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/search-service 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/fm-search-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fm-search-microservices:latest

  deploy-fm-search:
    needs: build-and-push-fm-search
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.fm-search == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M10 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop fm-search-microservices || true
          sudo docker rm fm-search-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fm-search-microservices:latest
          sudo docker run -d -p 8090:8090 --name fm-search-microservices ${{ secrets.DOCKER_USERNAME }}/fm-search-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------upload--------------------------------------------#
  build-and-push-fm-upload:
    needs: check-paths
    if: needs.check-paths.outputs.fm-upload == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/upload-service 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/fm-upload-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/fm-upload-microservices:latest

  deploy-fm-upload:
    needs: build-and-push-fm-upload
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.fm-upload == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M11 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop fm-upload-microservices || true
          sudo docker rm fm-upload-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fm-upload-microservices:latest
          sudo docker run -d -p 8088:8088 --name fm-upload-microservices ${{ secrets.DOCKER_USERNAME }}/fm-upload-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------LINK MANAGEMENT--------------------------------------------#
# -------------------------------------lm-delete--------------------------------------------#
  build-and-push-lm-delete:
    needs: check-paths
    if: needs.check-paths.outputs.lm-delete == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/delete-link-service 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/lm-delete-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/lm-delete-microservices:latest

  deploy-lm-delete:
    needs: build-and-push-lm-delete
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.lm-delete == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M12 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop lm-delete-microservices || true
          sudo docker rm lm-delete-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lm-delete-microservices:latest
          sudo docker run -d -p 8086:8086 --name lm-delete-microservices ${{ secrets.DOCKER_USERNAME }}/lm-delete-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------lm-frontend--------------------------------------------#
  build-and-push-lm-frontend:
    needs: check-paths
    if: needs.check-paths.outputs.lm-frontend == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/frontend 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/lm-frontend-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/lm-frontend-microservices:latest

  deploy-lm-frontend:
    needs: build-and-push-lm-frontend
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.lm-frontend == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M13 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop lm-frontend-microservices || true
          sudo docker rm lm-frontend-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lm-frontend-microservices:latest
          sudo docker run -d -p 8087:8087 --name lm-frontend-microservices ${{ secrets.DOCKER_USERNAME }}/lm-frontend-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------lm-save--------------------------------------------#
  build-and-push-lm-save:
    needs: check-paths
    if: needs.check-paths.outputs.lm-save == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/save-link-service 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/lm-save-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/lm-save-microservices:latest

  deploy-lm-save:
    needs: build-and-push-lm-save
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.lm-save == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M14 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop lm-save-microservices || true
          sudo docker rm lm-save-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lm-save-microservices:latest
          sudo docker run -d -p 8085:8085 --name lm-save-microservices ${{ secrets.DOCKER_USERNAME }}/lm-save-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------MAESTRO--------------------------------------------#
  build-and-push-maestro:
    needs: check-paths
    if: needs.check-paths.outputs.maestro == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/maestro-service 
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/maestro-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/maestro-microservices:latest

  deploy-maestro:
    needs: build-and-push-maestro
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.maestro == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M15 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop maestro-microservices || true
          sudo docker rm maestro-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/maestro-microservices:latest
          sudo docker run -d -p 8083:8083 --name maestro-microservices ${{ secrets.DOCKER_USERNAME }}/maestro-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------student--------------------------------------------#
  build-and-push-student:
    needs: check-paths
    if: needs.check-paths.outputs.student == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/student-schedule
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/student-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/student-microservices:latest

  deploy-student:
    needs: build-and-push-student
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.student == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M16 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop student-microservices || true
          sudo docker rm student-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/student-microservices:latest
          sudo docker run -d -p 8080:8080 --name student-microservices ${{ secrets.DOCKER_USERNAME }}/student-microservices:latest

          sudo docker ps -a
          EOF

# -------------------------------------tareas--------------------------------------------#
  build-and-push-tareas:
    needs: check-paths
    if: needs.check-paths.outputs.tareas == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/tareas-service
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/tareas-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/tareas-microservices:latest

  deploy-tareas:
    needs: build-and-push-tareas
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.tareas == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M17 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop tareas-microservices || true
          sudo docker rm tareas-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/tareas-microservices:latest
          sudo docker run -d -p 8084:8084 --name tareas-microservices ${{ secrets.DOCKER_USERNAME }}/tareas-microservices:latest

          sudo docker ps -a
          EOF
# -------------------------------------AUTH--------------------------------------------#     
  build-and-push-auth:
    needs: check-paths
    if: needs.check-paths.outputs.auth == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      # Paso 1: Checkout del código 
      - name: Checkout Code
        uses: actions/checkout@v3

      # Paso 2: Log in a Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 3: Construir la imagen Docker en la ruta específica
      - name: Build Docker image
        run: |
          cd BACKEND/user-auth-microservices  
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/user-auth-microservices:latest .

      # Paso 4: Subir la imagen Docker a Docker Hub 
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/user-auth-microservices:latest

  deploy-aws-auth:
    needs: build-and-push-auth
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.auth == 'true'
    steps:
      # Paso 1: Configurar la clave privada para AWS EC2
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      # Paso 2: Actualizar e instalar Docker en la instancia EC2 (Instancia 1)
      - name: Update system and install Docker (Instance 1)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M18 }} "sudo yum update -y"
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M18 }} "if ! command -v docker &> /dev/null; then echo 'Docker not found, installing...'; sudo yum install -y docker; sudo systemctl start docker; sudo systemctl enable docker; else echo 'Docker is already installed.'; fi"

      # Paso 3: Desplegar el contenedor Docker en la instancia EC2 (Instancia 1)
      - name: Deploy Docker Container (Instance 1)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M18 }} "sudo docker stop user-auth-microservices || true"
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M18 }} "sudo docker rm user-auth-microservices || true"
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M18 }} "sudo docker pull ${{ secrets.DOCKER_USERNAME }}/user-auth-microservices:latest"
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M18 }} "sudo docker run -d -p 3000:3000 --name user-auth-microservices -e DB_HOST=${{ secrets.DB_HOST }} -e DB_USER=${{ secrets.DB_USER }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_NAME=${{ secrets.DB_NAME }} ${{ secrets.DOCKER_USERNAME }}/user-auth-microservices:latest"
# -------------------------------------FRONT--------------------------------------------#
  build-and-push-frontend:
    needs: check-paths
    if: needs.check-paths.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd BACKEND/file-management/frontend
          docker build \
            --label "commit_sha=${{ github.sha }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/frontend-microservices:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-microservices:latest

  deploy-frontend:
    needs: build-and-push-frontend
    runs-on: ubuntu-latest
    if: needs.check-paths.outputs.frontend == 'true'
    steps:
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on AWS
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_M19 }} << "EOF"
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
          fi
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo docker stop frontend-microservices || true
          sudo docker rm frontend-microservices || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend-microservices:latest
          sudo docker run -d -p 5173:5173 --name frontend-microservices ${{ secrets.DOCKER_USERNAME }}/frontend-microservices:latest

          sudo docker ps -a
          EOF
          